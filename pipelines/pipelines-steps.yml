pipelines:
  - name: jerome_pipelines_test

    steps:
      - name: gradle_build
        type: GradleBuild
        configuration:
          runtime:
            type: image
            image:
              auto:
                language: java
                versions:
                  - '8.0'
          gradleCommand:        clean artifactoryPublish
          sourceLocation:       .
          configFileLocation:   .jfrog/projects
          configFileName:       gradle.yaml
          forceXrayScan:        false
          failOnScan:           false
          autoPublishBuildInfo: true
          inputResources:
            - name: jerome_github_resources
          outputResources:
            - name: jerome_build_info_gradle
          integrations:
            - name: Artifactory
        execution:
          onStart:
            - java -version
            - jfrog -v

      - name: gradle_promote
        type: PromoteBuild
        configuration:
          targetRepository:      jerome-gradle-prod-local
          includeDependencies:   true
          status:                'Approved'
          comment:               'Ready for production'
          copy:                  false
          inputSteps:
            - name: gradle_build
          inputResources:
            - name: jerome_build_info_gradle
              trigger: false
          outputResources:
            - name: jerome_build_info_promoted_gradle

      - name: docker_build
        type: DockerBuild
        configuration:
          affinityGroup: dockerGroup
          dockerFileLocation: .
          dockerFileName: Dockerfile
          dockerImageName: 'platform-us.staging.gcp.devopsacc.team/jerome-docker-dev-local/hello-pipelines'
          dockerImageTag: ${run_number}
          inputResources:
            - name: jerome_build_info_promoted_gradle
            - name: jerome_github_resources
            - name: gradle_app
          integrations:
            - name: Artifactory

      - name: docker_push
        type: DockerPush
        configuration:
          affinityGroup: dockerGroup
          targetRepository: jerome-docker-dev-local
          autoPublishBuildInfo: true
          forceXrayScan: false
          failOnScan: false
          outputResources:
            - name: jerome_build_info_docker
          integrations:
            - name: Artifactory
          inputSteps:
            - name: docker_build
        execution:
          onStart:
            - docker info

      - name: docker_promote
        type: PromoteBuild
        configuration:
          targetRepository:      jerome-docker-prod-local
          includeDependencies:   true
          status:                'Approved'
          comment:               'Ready for production'
          copy:                  false
          inputSteps:
            - name: docker_push
          inputResources:
            - name: jerome_build_info_docker
              trigger: false
          outputResources:
            - name: jerome_build_info_promoted_docker

      - name: helm_publish
        type: HelmPublish
        configuration:
          helmVersion: 3
          chartPath: pipelines-sample-chart
          inputResources:
            - name: jerome_github_resources
          outputResources:
            - name: jerome_helm_chart

      - name: helm_deploy
        type: HelmDeploy
        configuration:
          helmVersion: 3
          flags: "--set image.tag=${latest_tag}"
          releaseName: jfrog-pipelines-sample
          integrations:
            - name: k8s_emea_staging
          inputResources:
            - name: jerome_helm_chart
        execution:
          onStart:
            - >
              curl -X POST
              ${res_jerome_helm_chart_sourceArtifactory_url}/api/search/aql
              -u "${res_jerome_helm_chart_sourceArtifactory_user}:${res_jerome_helm_chart_sourceArtifactory_apikey}"
              -H 'Content-Type: text/plain'
              -d 'items.find({
                  "type": "file",
                  "repo":"jerome-docker-prod-local",
                  "name": { "$match": "*.json" },
                  "path": {"$match": "hello-pipelines/*" }
                })
                .include("path")
                .sort({"$desc": ["path" ] })
                .limit(1)' > aql_payload.json
            - jq -r '.results[0].path' aql_payload.json > docker_image.txt
            - cut -f 2 -d '/' docker_image.txt > .tag_from_aql
            - cat .tag_from_aql
            - add_pipeline_variables latest_tag=$(cat .tag_from_aql)
